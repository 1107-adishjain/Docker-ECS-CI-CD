def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent any
    tools {
        maven "MAVEN3.9"
        jdk "JDK17"
    }
    environment {
        registry = '491085416397.dkr.ecr.us-east-1.amazonaws.com/vprofileimg'
        registryCredential = 'awscreds'
        dockerImage = ''
        clusterName = "vprofile"   // Update with your ECS Cluster name
        serviceName = "vprofile-ecs-serv"   // Update with your ECS Service name
    }

    stages {
        stage("Fetch code") {
            steps {
                git branch: 'docker', url: 'https://github.com/1107-adishjain/vprofile-project.git'
            }
        }

        stage("Build") {
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving artifact"
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage("Unit Test") {
            steps {
                sh 'mvn test'
            }
        }

        stage("Checkstyle Analysis") {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage("Sonar Code Analysis") {
            environment {
                scannerHome = tool 'sonar6.2'
            }
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                    ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("Building Image") {
            steps {
                script {
                    dockerImage = docker.build("${registry}:${BUILD_NUMBER}", "-f Docker-files/app/multistage/Dockerfile .")
                }
            }
        }
        stage("Push Image to ECR") {
            steps { 
                script {
                    docker.withRegistry("https://" + registry, "ecr:us-east-1:" + registryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage("Remove Image from Jenkins") {
            steps {
                script {
                    sh "docker rmi -f ${registry}:${BUILD_NUMBER} || true"
            }
          }
        }
        stage("Deploy to ECS") {
            steps {
                script {
                    withAWS(credentials: registryCredential, region: 'us-east-1') {
                        sh """
                        # Force ECS Service to pull the latest image and restart tasks
                        aws ecs update-service --cluster $clusterName --service $serviceName --force-new-deployment
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def buildStatus = currentBuild.currentResult ?: 'SUCCESS'
                slackSend(
                    channel: "#cicd-pipeline",     
                    color: COLOR_MAP[buildStatus] ?: 'warning',
                    message: "*${buildStatus}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n<${env.BUILD_URL}console|View Console Log>"
                )
            }
        }
    }
}
